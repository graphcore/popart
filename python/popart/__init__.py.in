# Copyright (c) 2021 Graphcore Ltd. All rights reserved.
import os, sys
import pathlib

if 'onnx' in sys.modules.keys():
    raise ImportError('It looks like onnx has already been imported. Due to '
                      'an ongoing issue, popart must be imported before onnx.')

__version__ = "@VERSION@"

# Add the DSO library path. Look for the LIBDIR in a parent directory. Note that
# we iterate over parent directories because `gen_popart_supported_ops.py` imports
# popart from the build directory, which has a slightly different directory
# structure to the install directory.
parent_path = pathlib.Path(os.path.dirname(os.path.abspath(__file__)))
for parent_dir in parent_path.parents:
    candidate_libdir = os.path.join(parent_dir, "@CMAKE_INSTALL_LIBDIR@")
    if os.path.exists(candidate_libdir):
        lp = os.path.join(candidate_libdir)
        lp = os.path.abspath(lp)
        sys.path.insert(0, lp)
        break

_import_exc = None
try:
    # Import all symbols into our namespace
    from popart_core import *
    from popart_opset6 import *
    from popart_opset7 import *
    from popart_opset8 import *
    from popart_opset9 import *
    from popart_opset10 import *
    from popart_opset11 import *

    from popart.builder import Builder
    from popart.session import InferenceSession, TrainingSession, OutOfMemoryException
    from popart.tensorinfo import TensorInfo
except ModuleNotFoundError as exc:
    _import_exc = exc

if _import_exc:
    msg = (
        f"{_import_exc}.\n"
        "Hint: You might be running a Python version that PopART doesn't support."
    )
    raise RuntimeError(msg)

# pybind11 has some odd behaviour when binding
# a member type `std::map<K, V>`.
# Given the following binding where bar is of
# type `std::map<std::string, std::string>`:
#
#   py::class_<Foo>(m, "Foo")
#     .def_readwrite("bar", &Foo::bar)
#
# The following code:
#
#   foo = Foo()
#   foo.bar = {'a': 'aa'}
#   foo.bar['b'] = 'bb'
#   print(foo.bar)
#
# Will print `{'a': 'aa'}`.
# This is because foo.bar returns a copy of the underlying c++
# dictionary, so `foo.bar['b'] = 'bb'` is updating the copy.
# This property wraps the return of `foo.bar` in an instance of
# DictWrapper. When DictWrapper is updated, it then resets `foo.bar`
# to its new state.
# This is equivalent to doing the following:
#
#   foo = Foo()
#   foo.bar = {'a': 'aa'}
#   bar_copy = foo.bar['b']
#   bar_copy['b'] = 'bb'
#   foo.bar = bar_copy
#
def _get_options_dict(option_name):
    def get_option_impl(opts):
        # Wrapper around dict.
        # Everytime an element is set, the update lambda is called.
        class DictWrapper(dict):
            def __init__(self, update, *args, **kwargs):
                self._update = update
                super(DictWrapper, self).__init__(*args, **kwargs)

            def __setitem__(self, name, value):
                dict.__setitem__(self, name, value)
                self._update(self)

        def update_options(value):
            setattr(opts, option_name, value)

        return DictWrapper(update_options, getattr(opts, option_name))

    return get_option_impl


def _set_options_dict(option_name):
    def set_option_impl(opts, value):
        setattr(opts, option_name, value)

    return set_option_impl


SessionOptions.engineOptions = property(_get_options_dict('_engineOptions'),
                                        _set_options_dict('_engineOptions'))
SessionOptions.convolutionOptions = property(
    _get_options_dict('_convolutionOptions'),
    _set_options_dict('_convolutionOptions'))
SessionOptions.lstmOptions = property(_get_options_dict('_lstmOptions'),
                                      _set_options_dict('_lstmOptions'))
SessionOptions.matmulOptions = property(_get_options_dict('_matmulOptions'),
                                        _set_options_dict('_matmulOptions'))
SessionOptions.reportOptions = property(_get_options_dict('_reportOptions'),
                                        _set_options_dict('_reportOptions'))
SessionOptions.gclOptions = property(_get_options_dict('_gclOptions'),
                                     _set_options_dict('_gclOptions'))
SessionOptions.updatableBuffers = property(_get_options_dict('_updatableNamedBuffers'),
                                     _set_options_dict('_updatableNamedBuffers'))
ExperimentalSettings.customTransformApplierSettings = property(_get_options_dict('_customTransformApplierSettings'),
                                     _set_options_dict('_customTransformApplierSettings'))
SessionOptions.tensorLocationSettingsOverride = property(
    _get_options_dict('_tensorLocationSettingsOverride'),
    _set_options_dict('_tensorLocationSettingsOverride'))
